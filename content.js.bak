// Google Meet Subtitles Logger
// This script monitors Google Meet subtitle elements and logs them to the console

// –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å –∏—Ö –æ—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤
const SYSTEM_PREFIX = 'üîß SYSTEM: ';
const SUBTITLE_PREFIX = 'üìù Subtitles: ';

// –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π console.log –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const originalConsoleLog = console.log;
console.log = function() {
  // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'üìù Subtitles:', —Ç–æ —ç—Ç–æ —Å—É–±—Ç–∏—Ç—Ä—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (arguments[0] && typeof arguments[0] === 'string' && arguments[0].startsWith(SUBTITLE_PREFIX)) {
    originalConsoleLog.apply(console, arguments);
  } else {
    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
    const args = Array.from(arguments);
    if (args[0] && typeof args[0] === 'string') {
      args[0] = SYSTEM_PREFIX + args[0];
    } else {
      args.unshift(SYSTEM_PREFIX);
    }
    originalConsoleLog.apply(console, args);
  }
};

// –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
originalConsoleLog('Google Meet Subtitles Logger started');

// Constants for subtitle processing
const MIN_LENGTH = 10;                  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ 
const BUFFER_DELAY = 1500;              // –ó–∞–¥–µ—Ä–∂–∫–∞ –±—É—Ñ–µ—Ä–∞ (1.5 —Å–µ–∫—É–Ω–¥—ã)
const MIN_LOG_INTERVAL = 1000;          // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const SENTENCE_ENDS = ['.', '!', '?', ';']; // –û–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
const SUBTITLE_CHECK_INTERVAL = 1000;   // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤

// Track previously seen subtitles to avoid duplicates
const seenSubtitles = new Set();
let lastSubtitle = '';
let lastLogTime = 0;
let currentBuffer = '';
let bufferTimer = null;
let isProcessingSubtitles = false;

// –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
let sentenceBuffer = '';
let sentenceBufferTimeout = null;

// Process subtitle text
function processSubtitleText(text) {
  if (!text || text.trim() === '') return;
  
  // –û—á–∏—â–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
  let cleanText = text;
  if (cleanText.startsWith('You')) {
    cleanText = cleanText.substring(3).trim();
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–∞–ª—å–Ω—ã–µ –ª–∏ —ç—Ç–æ —Å—É–±—Ç–∏—Ç—Ä—ã
  if (!isRealSubtitle(cleanText)) return;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—É–±—Ç–∏—Ç—Ä–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  if (cleanText === lastSubtitle) return;
  
  const now = Date.now();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ - —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∑–Ω–∞–∫–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  const hasCompleteSentence = SENTENCE_ENDS.some(mark => cleanText.endsWith(mark));
  
  // –ï—Å–ª–∏ currentBuffer –ø—É—Å—Ç –∏–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ä—ã–π –±—É—Ñ–µ—Ä - –æ–±–Ω–æ–≤–ª—è–µ–º –±—É—Ñ–µ—Ä
  if (currentBuffer === '' || cleanText.includes(currentBuffer)) {
    currentBuffer = cleanText;
  }
  
  // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–≤–æ–¥–∞ –∏–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
  if (now - lastLogTime > MIN_LOG_INTERVAL || hasCompleteSentence) {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if (bufferTimer) {
      clearTimeout(bufferTimer);
      bufferTimer = null;
    }
    
    if (hasCompleteSentence) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –≤—ã–≤–æ–¥–∏–º —Å—Ä–∞–∑—É
      const sentences = cleanText.split(/([.!?;])/).filter(s => s.trim().length > 0);
      let output = '';
      
      // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
      for (let i = 0; i < sentences.length; i += 2) {
        if (i + 1 < sentences.length) {
          output = sentences[i] + sentences[i + 1];
          if (output.length >= MIN_LENGTH && !seenSubtitles.has(output)) {
            originalConsoleLog(SUBTITLE_PREFIX + output);
            seenSubtitles.add(output);
          }
        } else {
          output = sentences[i];
          if (output.length >= MIN_LENGTH && !seenSubtitles.has(output)) {
            originalConsoleLog(SUBTITLE_PREFIX + output);
            seenSubtitles.add(output);
          }
        }
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä
      currentBuffer = '';
    } else {
      // –ò–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏–º —Ç–æ —á—Ç–æ –µ—Å—Ç—å –≤ –±—É—Ñ–µ—Ä–µ
      if (currentBuffer && currentBuffer.length >= MIN_LENGTH && !seenSubtitles.has(currentBuffer)) {
        originalConsoleLog(SUBTITLE_PREFIX + currentBuffer);
        seenSubtitles.add(currentBuffer);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä
        currentBuffer = '';
      }
    }
    
    lastLogTime = now;
  } else {
    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–≤–æ–¥–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (bufferTimer) {
      clearTimeout(bufferTimer);
    }
    
    bufferTimer = setTimeout(() => {
      if (currentBuffer && currentBuffer.length >= MIN_LENGTH && !seenSubtitles.has(currentBuffer)) {
        originalConsoleLog(SUBTITLE_PREFIX + currentBuffer);
        seenSubtitles.add(currentBuffer);
      }
      currentBuffer = '';
      bufferTimer = null;
    }, BUFFER_DELAY);
  }
  
  lastSubtitle = cleanText;
}

// UI —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å—É–±—Ç–∏—Ç—Ä—ã
const UI_ELEMENTS = [
  'arrow_downward', 'Jump to bottom', 'More options', 'more_vert', 'Present', 'present_to_all',
  'Microphone', 'Camera', 'Join now', 'Leave call', 'Turn on', 'Turn off',
  'mic_', 'videocam', 'settings', 'people', 'chat', 'present_', 'inventory',
  'volume_up', 'check', 'expand_more', 'notifications', 'Ready to join?',
  'Test speakers', 'Use Companion mode', 'Cast this meeting', 'Make a test recording',
  'Cast', 'Other ways', 'Choose activity', 'speaker_', 'Join', 'Leave',
  'Now', 'have joined', 'allowed to', 'hand is', 'camera is', 'microphone is', 
  'desktop notifi', 'is here', 'participants', 'no one',
  // –ù–æ–≤—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  'Apply visual effects', 'Gemini', 'note', 'account', 'Show', 'fewer', 'options',
  'Call ends', 'Switch', 'gmail', 'Apply', 'effect', 'Offer', 'Effects', 'soon',
  'maksumonka', 'comSwitch', 'isn\'t taking', 'Will end', 'Call will',
  'taking notes', 'not taking', 'taking note', 'enable', 'disable', 'caption',
  'filter', 'layout', 'view'
];

// –ö–ª–∞—Å—Å—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã
const SUBTITLE_CLASSES = [
  'CNusmb', 'VbkSUe', 'a4cQT', 'iOzk7', 'TBMuR', 'zTETae', 
  'Mz6pEf', 'n2NWs', 'KvPUJb', 'iTTPOb', 'vdk1ce',
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ Google Meet
  'VfPpkd-gIZYIncW', 'ceZ3VW', 'JIPKlb'
];

// –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ Google Meet
// Google Meet –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É —ç—Ç–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è
const SUBTITLE_SELECTORS = [
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  '.CNusmb', '.VbkSUe', '.a4cQT', '[data-message-text]', 
  '.iOzk7', '.TBMuR', '.zTETae', '.Mz6pEf', '.n2NWs',
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–º–µ—á–µ–Ω—ã
  '.KvPUJb', '.iTTPOb',
  // –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
  '[data-identifier="live-caption"]',
  // –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
  '.vdk1ce',
  // –≠–ª–µ–º–µ–Ω—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º —Ä–æ–ª–∏
  '[role="complementary"]',
  '[role="log"]',
  // –ù–æ–≤—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ Google Meet
  '.VfPpkd-gIZYIncW', '.ceZ3VW', '.JIPKlb', 
  '[jsname="tgaKEf"]', // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
  '[jscontroller="IlfM5e"]', // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  '[data-display-text]', // –ê—Ç—Ä–∏–±—É—Ç —Å —Ç–µ–∫—Å—Ç–æ–º
  '.subtitle-container', // –û–±—â–∏–π –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  '.captions-container', // –ï—â—ë –æ–¥–∏–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π –∫–ª–∞—Å—Å
  '.Pdb3Mc' // –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Å—É–±—Ç–∏—Ç—Ä–æ–≤
];

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function isUIElement(text) {
  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, —ç—Ç–æ –Ω–µ —Å—É–±—Ç–∏—Ç—Ä—ã
  if (!text || text.trim() === '') return true;
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç
  const normalizedText = text.toLowerCase();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∏–ª–∏ –≤–µ–±-–∞–¥—Ä–µ—Å
  if (normalizedText.includes('@') || 
      normalizedText.includes('.com') || 
      normalizedText.includes('.ru') || 
      normalizedText.includes('.net') ||
      normalizedText.includes('.org')) {
    return true;
  }
  
  // –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã —Å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, –≤–µ—Ä–æ—è—Ç–Ω–æ, UI —ç–ª–µ–º–µ–Ω—Ç—ã
  const words = normalizedText.split(/\s+/).filter(w => w.length > 0);
  if (words.length === 1 && words[0].length < 15) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞)
  for (const element of UI_ELEMENTS) {
    if (normalizedText.includes(element.toLowerCase())) {
      return true;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  if (
    normalizedText.includes('–º–∏–∫—Ä–æ—Ñ–æ–Ω') || 
    normalizedText.includes('–¥–∏–Ω–∞–º–∏–∫') || 
    normalizedText.includes('–∫–∞–º–µ—Ä') ||
    normalizedText.includes('–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü') ||
    normalizedText.includes('—Å–æ–µ–¥–∏–Ω–µ–Ω–∏') ||
    normalizedText.includes('–ø—Ä–∏—Å–æ–µ–¥') ||
    normalizedText.includes('–ø–æ–∫–∏–Ω—É—Ç—å') ||
    normalizedText.includes('—É–≤–µ–¥–æ–º–ª–µ–Ω') ||
    normalizedText.includes('–≤–æ–π—Ç–∏') ||
    normalizedText.includes('–≤—ã–π—Ç–∏') ||
    normalizedText.includes('—ç—Ñ—Ñ–µ–∫—Ç') ||
    normalizedText.includes('–∑–∞–ø–∏—Å—å') ||
    normalizedText.includes('–∑–∞–ø–∏—Å') ||
    normalizedText.includes('–∑–≤–æ–Ω–æ–∫') ||
    normalizedText.includes('–∑–≤—É–∫') ||
    normalizedText.includes('–≤–∏–¥–µ–æ') ||
    normalizedText.includes('—ç–∫—Ä–∞–Ω') ||
    normalizedText.includes('–Ω–∞—Å—Ç—Ä–æ–π–∫') ||
    normalizedText.includes('–¥–µ–ª–∏—Ç') ||
    normalizedText.includes('–ø–æ–∫–∞–∑')
  ) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫ (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∫–æ–Ω–æ–∫)
  if (
    normalizedText.includes('_') ||      // –ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –∏–∫–æ–Ω–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    /^[a-z_]+$/.test(normalizedText) ||  // –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    normalizedText.length < 10 && !normalizedText.includes(' ') // –ö–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
  ) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const specialCharsCount = (normalizedText.match(/[^a-zA-Z–∞-—è–ê-–Ø0-9\s.,!?]/g) || []).length;
  if (specialCharsCount > 5 && specialCharsCount / normalizedText.length > 0.3) {
    return true;
  }
  
  return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ DOM-—ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º —Å—É–±—Ç–∏—Ç—Ä–æ–≤
function isSubtitleContainer(element) {
  // –ù–∏—á—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  if (!element || !element.classList) return false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏ –∫–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å—É–±—Ç–∏—Ç—Ä—ã
  if (
    element.hasAttribute('data-message-text') ||
    element.hasAttribute('data-identifier') ||
    element.getAttribute('role') === 'log' ||
    element.getAttribute('role') === 'complementary'
  ) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã
  for (const cls of SUBTITLE_CLASSES) {
    if (element.classList.contains(cls)) {
      return true;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–¥–æ 3 —É—Ä–æ–≤–Ω–µ–π –≤–≤–µ—Ä—Ö)
  let parent = element.parentElement;
  let level = 0;
  while (parent && level < 3) {
    if (
      parent.hasAttribute('data-message-text') ||
      parent.hasAttribute('data-identifier') ||
      parent.getAttribute('role') === 'log' ||
      parent.getAttribute('role') === 'complementary'
    ) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    for (const cls of SUBTITLE_CLASSES) {
      if (parent.classList && parent.classList.contains(cls)) {
        return true;
      }
    }
    
    parent = parent.parentElement;
    level++;
  }
  
  return false;
}

// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
function isRealSubtitle(text) {
  // –ù–∞—Å—Ç–æ—è—â–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã –æ–±—ã—á–Ω–æ:
  // 1. –ò–º–µ—é—Ç —Ä–∞–∑—É–º–Ω—É—é –¥–ª–∏–Ω—É
  // 2. –ù–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–∏–ø–∏—á–Ω—ã—Ö UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  // 3. –ò–º–µ—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç UI —ç–ª–µ–º–µ–Ω—Ç–æ–º
  if (isUIElement(text)) return false;
  
  // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–ø—Ä–æ—Å—Ç–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Å–ª–æ–≤)
  if (text.length < MIN_LENGTH) return false;
  
  // –°—É–±—Ç–∏—Ç—Ä—ã –æ–±—ã—á–Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç HTML-—Ç–µ–≥–æ–≤
  if (text.includes('<') && text.includes('>')) return false;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
  const words = text.split(/\s+/).filter(word => word.length > 0);
  if (words.length < 2) return false; // –°—É–±—Ç–∏—Ç—Ä—ã –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±—É–∫–≤ –∫ –Ω–µ-–±—É–∫–≤–∞–º - –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ –º—è–≥–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  const letters = text.match(/[a-zA-Z–∞-—è–ê-–Ø]/g) || [];
  const nonLetters = text.match(/[^a-zA-Z–∞-—è–ê-–Ø\s]/g) || [];
  if (letters.length === 0 || nonLetters.length / (letters.length + 1) > 0.7) {
    return false;
  }
  
  return true;
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
setInterval(() => {
  if (seenSubtitles.size > 30) {
    const recent = Array.from(seenSubtitles).slice(-20);
    seenSubtitles.clear();
    recent.forEach(sub => seenSubtitles.add(sub));
  }
}, 60000);

// Function to observe subtitles
function observeSubtitles() {
  originalConsoleLog('Starting subtitle observation');
  
  // The main container where subtitles appear in Google Meet
  const targetNode = document.body;
  
  // Observer configuration
  const config = { 
    childList: true, 
    subtree: true, 
    characterData: true
  };
  
  // Callback to execute when mutations are observed
  const callback = function(mutationsList, observer) {
    // Prevent processing if we're already doing so to avoid race conditions
    if (isProcessingSubtitles) return;
    isProcessingSubtitles = true;
    
    try {
      // Join all selectors
      const combinedSelector = SUBTITLE_SELECTORS.join(', ');
      const subtitleElements = document.querySelectorAll(combinedSelector);
      
      // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
      if (subtitleElements.length === 0) {
        // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å—É–±—Ç–∏—Ç—Ä—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        document.querySelectorAll('div, span').forEach(element => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
          if (element.childNodes.length <= 3 && element.textContent) {
            const text = element.textContent.trim();
            if (text.length > MIN_LENGTH && !isUIElement(text)) {
              processSubtitleText(text);
            }
          }
        });
      } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        let candidateTexts = [];
        
        subtitleElements.forEach(element => {
          const text = element.textContent || element.innerText || '';
          if (text && text.trim() !== '') {
            candidateTexts.push(text.trim());
          }
        });
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π
        for (const text of candidateTexts) {
          if (isRealSubtitle(text)) {
            processSubtitleText(text);
          }
        }
      }
    } catch (error) {
      console.error('Error processing subtitles:', error);
    } finally {
      isProcessingSubtitles = false;
    }
  };
  
  // Create an observer instance linked to the callback function
  const observer = new MutationObserver(callback);
  
  // Start observing the target node for configured mutations
  observer.observe(targetNode, config);
  
  originalConsoleLog('Subtitle observer started');
  
  // Backup check with reduced frequency
  setInterval(() => {
    if (isProcessingSubtitles) return;
    isProcessingSubtitles = true;
    
    try {
      const combinedSelector = SUBTITLE_SELECTORS.join(', ');
      const subtitleElements = document.querySelectorAll(combinedSelector);
      
      if (subtitleElements.length > 0) {
        let candidateTexts = [];
        
        subtitleElements.forEach(element => {
          const text = element.textContent || element.innerText || '';
          if (text && text.trim() !== '') {
            candidateTexts.push(text.trim());
          }
        });
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π
        for (const text of candidateTexts) {
          if (isRealSubtitle(text)) {
            processSubtitleText(text);
          }
        }
      }
    } catch (error) {
      console.error('Error in interval check:', error);
    } finally {
      isProcessingSubtitles = false;
    }
  }, SUBTITLE_CHECK_INTERVAL);
}

// Fallback function to try multiple methods of finding subtitles
function findSubtitlesWithDeepScan() {
  originalConsoleLog('Performing deep scan for subtitle elements');
  
  // Look for elements with specific text patterns that might be subtitles
  document.querySelectorAll('div, span, p').forEach(el => {
    // –¢–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏:
    // - –ú–∏–Ω–∏–º—É–º –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    // - –ò–º–µ—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–π —Ç–µ–∫—Å—Ç
    // - –¢–µ–∫—Å—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
    if (el.childNodes.length <= 3 && el.textContent && 
        el.textContent.trim().length > MIN_LENGTH && 
        el.textContent.trim().length < 200) {
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      if (isUIElement(el.textContent)) return;
      
      // Check if this element changes frequently
      const elId = el.id || Math.random().toString(36).substring(7);
      el.dataset.subtitleScan = elId;
      
      // Watch this element for changes
      const elementObserver = new MutationObserver((mutations) => {
        if (isProcessingSubtitles) return;
        isProcessingSubtitles = true;
        
        try {
          let hasTextChanged = false;
          
          mutations.forEach(mutation => {
            if (mutation.type === 'characterData' || mutation.type === 'childList') {
              hasTextChanged = true;
            }
          });
          
          if (hasTextChanged) {
            const text = el.textContent || el.innerText;
            if (text && text.trim() !== '' && isRealSubtitle(text)) {
              processSubtitleText(text);
            }
          }
        } catch (error) {
          console.error('Error in deep scan observer:', error);
        } finally {
          isProcessingSubtitles = false;
        }
      });
      
      elementObserver.observe(el, {
        characterData: true,
        childList: true,
        subtree: true
      });
    }
  });
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ,
  // –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  const bodyObserver = new MutationObserver((mutations) => {
    mutations.forEach(mutation => {
      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
        mutation.addedNodes.forEach(node => {
          if (node.nodeType === Node.ELEMENT_NODE) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º —Å—É–±—Ç–∏—Ç—Ä–æ–≤
            SUBTITLE_SELECTORS.forEach(selector => {
              try {
                if (node.matches && node.matches(selector) || 
                    node.querySelector && node.querySelector(selector)) {
                  const text = node.textContent || node.innerText;
                  if (text && text.trim() !== '' && isRealSubtitle(text)) {
                    processSubtitleText(text);
                  }
                }
              } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö
              }
            });
          }
        });
      }
    });
  });
  
  bodyObserver.observe(document.body, {
    childList: true,
    subtree: true
  });
}

// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
function scanForSubtitles() {
  // –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ div —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç
  const allElements = document.querySelectorAll('div, span, p');
  originalConsoleLog(`Scanning ${allElements.length} elements for subtitles...`);
  
  let foundSubtitles = false;
  let newObservers = 0;
  
  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
  if (observerCount > 150) {
    originalConsoleLog("Too many observers, skipping scan");
    setTimeout(scanForSubtitles, 20000);
    return;
  }
  
  allElements.forEach(el => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ/–±–æ–ª—å—à–∏–µ
    if (!el.textContent || 
        el.textContent.trim().length < MIN_LENGTH || 
        el.textContent.trim().length > 200) {
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    const text = el.textContent.trim();
    
    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç UI —ç–ª–µ–º–µ–Ω—Ç–æ–º
    if (!isUIElement(text)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º —Å—É–±—Ç–∏—Ç—Ä–æ–≤
      if (text.split(' ').length >= 2 && // –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞
          /[a-zA-Z–∞-—è–ê-–Ø]{3,}/.test(text)) { // –º–∏–Ω–∏–º—É–º 3 –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—É–±—Ç–∏—Ç—Ä—ã, –Ω–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        const observer = new MutationObserver((mutations) => {
          mutations.forEach(mutation => {
            if (mutation.type === 'characterData' || mutation.type === 'childList') {
              const newText = el.textContent.trim();
              if (newText.length >= MIN_LENGTH && !isUIElement(newText)) {
                processSubtitleText(newText);
              }
            }
          });
        });
        
        observerCount++;
        newObservers++;
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
        observer.observe(el, {
          characterData: true,
          childList: true, 
          subtree: true
        });
        
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        if (isRealSubtitle(text)) {
          processSubtitleText(text);
          foundSubtitles = true;
        }
      }
    }
  });
  
  originalConsoleLog(`Aggressive scan complete. Found subtitles: ${foundSubtitles}, new observers: ${newObservers}, total: ${observerCount}`);
  
  // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥
  setTimeout(scanForSubtitles, 20000);
}

// Function to detect when Google Meet is fully loaded
function detectGoogleMeet() {
  // Method 1: Check for specific Google Meet elements
  const meetElements = [
    '.c8mVDd',  // Meeting bottom bar
    '.crqnQb',  // Meeting container
    '.rG0ybd',  // Main meeting layout
    '.NzPR9b',  // Video grid
    '.GvcWrd',  // Participants panel
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    '.juFBgc',  // –ù–æ–≤—ã–π –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    '.XnKlKd',  // –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    '.NGp9le',  // –ù–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    '.Tmb7Fd'   // –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∏–¥–µ–æ
  ];
  
  // Check if any Meet elements exist
  const meetLoaded = meetElements.some(selector => document.querySelector(selector));
  
  if (meetLoaded) {
    originalConsoleLog('Google Meet interface detected');
    observeSubtitles();
    setTimeout(findSubtitlesWithDeepScan, 5000); // Try deep scan after 5 seconds
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    setTimeout(() => {
      originalConsoleLog('Starting aggressive subtitle scanning...');
      scanForSubtitles();
    }, 10000);
    
    return true;
  }
  
  return false;
}

// Initial check on page load
window.addEventListener('load', () => {
  originalConsoleLog('Page loaded, waiting for Google Meet interface...');
  
  // Try to detect Google Meet interface immediately
  if (!detectGoogleMeet()) {
    // If not detected, set up periodic checks
    const detectInterval = setInterval(() => {
      if (detectGoogleMeet()) {
        clearInterval(detectInterval);
      }
    }, 1000);
    
    // Safety timeout to clear interval after 60 seconds
    setTimeout(() => {
      clearInterval(detectInterval);
      originalConsoleLog('Timed out waiting for Google Meet interface. Starting observers anyway.');
      observeSubtitles();
      findSubtitlesWithDeepScan();
    }, 60000);
  }
});

// Setup a mutation observer to detect when Google Meet loads
const bodyObserver = new MutationObserver((mutations) => {
  if (detectGoogleMeet()) {
    bodyObserver.disconnect();
  }
});

bodyObserver.observe(document.body, { childList: true, subtree: true }); 