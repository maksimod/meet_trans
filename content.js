// Google Meet Subtitles Logger
// This script monitors Google Meet subtitle elements and logs them to the console

console.log('Google Meet Subtitles Logger started');

// Track previously seen subtitles to avoid duplicates
const seenSubtitles = new Set();
let lastSubtitle = '';
let lastLogTime = 0;
let currentBuffer = '';
let bufferTimer = null;
let isProcessingSubtitles = false;

// Constants for subtitle processing
const MIN_LENGTH = 10;                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ 
const BUFFER_DELAY = 2000;            // –ó–∞–¥–µ—Ä–∂–∫–∞ –±—É—Ñ–µ—Ä–∞ (2 —Å–µ–∫—É–Ω–¥—ã)
const MIN_LOG_INTERVAL = 1500;        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (1.5 —Å–µ–∫)
const SENTENCE_ENDS = ['.', '!', '?', ';']; // –û–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

// UI —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å—É–±—Ç–∏—Ç—Ä—ã
const UI_ELEMENTS = [
  'arrow_downward', 'Jump to bottom', 'More options', 'more_vert', 'Present', 'present_to_all',
  'Microphone', 'Camera', 'Join now', 'Leave call', 'Turn on', 'Turn off',
  'mic_', 'videocam', 'settings', 'people', 'chat', 'present_', 'inventory',
  'volume_up', 'check', 'expand_more', 'notifications', 'Ready to join?',
  'Test speakers', 'Use Companion mode', 'Cast this meeting', 'Make a test recording',
  'Cast', 'Other ways', 'Choose activity', 'speaker_', 'Join', 'Leave',
  'Now', 'have joined', 'allowed to', 'hand is', 'camera is', 'microphone is', 
  'desktop notifi', 'is here', 'participants', 'no one'
];

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function isUIElement(text) {
  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, —ç—Ç–æ –Ω–µ —Å—É–±—Ç–∏—Ç—Ä—ã
  if (!text || text.trim() === '') return true;
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç
  const normalizedText = text.toLowerCase();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞)
  for (const element of UI_ELEMENTS) {
    if (normalizedText.includes(element.toLowerCase())) {
      return true;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  if (
    normalizedText.includes('–º–∏–∫—Ä–æ—Ñ–æ–Ω') || 
    normalizedText.includes('–¥–∏–Ω–∞–º–∏–∫') || 
    normalizedText.includes('–∫–∞–º–µ—Ä') ||
    normalizedText.includes('–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü') ||
    normalizedText.includes('—Å–æ–µ–¥–∏–Ω–µ–Ω–∏') ||
    normalizedText.includes('–ø—Ä–∏—Å–æ–µ–¥') ||
    normalizedText.includes('–ø–æ–∫–∏–Ω—É—Ç—å') ||
    normalizedText.includes('—É–≤–µ–¥–æ–º–ª–µ–Ω') ||
    normalizedText.includes('–≤–æ–π—Ç–∏') ||
    normalizedText.includes('–≤—ã–π—Ç–∏')
  ) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫ (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∫–æ–Ω–æ–∫)
  if (
    normalizedText.includes('_') ||      // –ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –∏–∫–æ–Ω–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    /^[a-z_]+$/.test(normalizedText) ||  // –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    normalizedText.length < 10 && !normalizedText.includes(' ') // –ö–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
  ) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const specialCharsCount = (normalizedText.match(/[^a-zA-Z–∞-—è–ê-–Ø0-9\s.,!?]/g) || []).length;
  if (specialCharsCount > 5 && specialCharsCount / normalizedText.length > 0.3) {
    return true;
  }
  
  return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ DOM-—ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º —Å—É–±—Ç–∏—Ç—Ä–æ–≤
function isSubtitleContainer(element) {
  // –ù–∏—á—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  if (!element || !element.classList) return false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏ –∫–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å—É–±—Ç–∏—Ç—Ä—ã
  if (
    element.hasAttribute('data-message-text') ||
    element.hasAttribute('data-identifier') ||
    element.getAttribute('role') === 'log' ||
    element.getAttribute('role') === 'complementary'
  ) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã
  for (const cls of SUBTITLE_CLASSES) {
    if (element.classList.contains(cls)) {
      return true;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–¥–æ 3 —É—Ä–æ–≤–Ω–µ–π –≤–≤–µ—Ä—Ö)
  let parent = element.parentElement;
  let level = 0;
  while (parent && level < 3) {
    if (
      parent.hasAttribute('data-message-text') ||
      parent.hasAttribute('data-identifier') ||
      parent.getAttribute('role') === 'log' ||
      parent.getAttribute('role') === 'complementary'
    ) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    for (const cls of SUBTITLE_CLASSES) {
      if (parent.classList && parent.classList.contains(cls)) {
        return true;
      }
    }
    
    parent = parent.parentElement;
    level++;
  }
  
  return false;
}

// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
function isRealSubtitle(text) {
  // –ù–∞—Å—Ç–æ—è—â–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã –æ–±—ã—á–Ω–æ:
  // 1. –ò–º–µ—é—Ç —Ä–∞–∑—É–º–Ω—É—é –¥–ª–∏–Ω—É
  // 2. –ù–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–∏–ø–∏—á–Ω—ã—Ö UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  // 3. –ò–º–µ—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç UI —ç–ª–µ–º–µ–Ω—Ç–æ–º
  if (isUIElement(text)) return false;
  
  // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–ø—Ä–æ—Å—Ç–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Å–ª–æ–≤)
  if (text.length < MIN_LENGTH) return false;
  
  // –°—É–±—Ç–∏—Ç—Ä—ã –æ–±—ã—á–Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç HTML-—Ç–µ–≥–æ–≤
  if (text.includes('<') && text.includes('>')) return false;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
  const words = text.split(/\s+/).filter(word => word.length > 0);
  if (words.length < 2) return false; // –°—É–±—Ç–∏—Ç—Ä—ã –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±—É–∫–≤ –∫ –Ω–µ-–±—É–∫–≤–∞–º
  const letters = text.match(/[a-zA-Z–∞-—è–ê-–Ø]/g) || [];
  const nonLetters = text.match(/[^a-zA-Z–∞-—è–ê-–Ø\s]/g) || [];
  if (letters.length === 0 || nonLetters.length / letters.length > 0.5) {
    return false;
  }
  
  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –Ω–µ —Å—É–±—Ç–∏—Ç—Ä—ã
  if (text.length > 100 && !(/[.!?,;:]/).test(text)) {
    return false;
  }
  
  return true;
}

// –ö–ª–∞—Å—Å—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã
const SUBTITLE_CLASSES = [
  'CNusmb', 'VbkSUe', 'a4cQT', 'iOzk7', 'TBMuR', 'zTETae', 
  'Mz6pEf', 'n2NWs', 'KvPUJb', 'iTTPOb', 'vdk1ce'
];

// Process subtitle text
function processSubtitleText(text) {
  if (!text || text.trim() === '') return;
  
  // –û—á–∏—â–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
  let cleanText = text;
  if (cleanText.startsWith('You')) {
    cleanText = cleanText.substring(3).trim();
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–∞–ª—å–Ω—ã–µ –ª–∏ —ç—Ç–æ —Å—É–±—Ç–∏—Ç—Ä—ã
  if (!isRealSubtitle(cleanText)) return;
  
  // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  const sentences = splitIntoSentences(cleanText);
  
  const now = Date.now();
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
  for (const sentence of sentences) {
    // –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ —É–∂–µ –≤—ã–≤–æ–¥–∏–ª–æ—Å—å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (sentence.length < MIN_LENGTH || seenSubtitles.has(sentence)) continue;
    
    console.log('üìù Subtitles:', sentence);
    seenSubtitles.add(sentence);
    lastSubtitle = sentence;
    lastLogTime = now;
  }
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä
  currentBuffer = '';
  if (bufferTimer) {
    clearTimeout(bufferTimer);
    bufferTimer = null;
  }
}

// –†–∞–∑–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
function splitIntoSentences(text) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ –∑–Ω–∞–∫–∞–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è,
  // –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–∏ –∑–Ω–∞–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
  const sentencesArray = [];
  const sentencesRaw = text.split(/([.!?;]+)/);
  
  // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∏—Ö –∑–Ω–∞–∫–∞–º–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
  for (let i = 0; i < sentencesRaw.length - 1; i += 2) {
    const sentenceText = sentencesRaw[i].trim();
    const punctuation = sentencesRaw[i+1] || '';
    
    if (sentenceText) {
      sentencesArray.push(sentenceText + punctuation);
    }
  }
  
  // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
  return sentencesArray.length > 0 ? sentencesArray : [text];
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
setInterval(() => {
  if (seenSubtitles.size > 15) {
    const recent = Array.from(seenSubtitles).slice(-10);
    seenSubtitles.clear();
    recent.forEach(sub => seenSubtitles.add(sub));
  }
}, 60000);

// Function to observe subtitles
function observeSubtitles() {
  console.log('Starting subtitle observation');
  
  // The main container where subtitles appear in Google Meet
  const targetNode = document.body;
  
  // Observer configuration
  const config = { 
    childList: true, 
    subtree: true, 
    characterData: true
  };
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ Google Meet
  // Google Meet –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É —ç—Ç–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è
  const SUBTITLE_SELECTORS = [
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    '.CNusmb', '.VbkSUe', '.a4cQT', '[data-message-text]', 
    '.iOzk7', '.TBMuR', '.zTETae', '.Mz6pEf', '.n2NWs',
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–º–µ—á–µ–Ω—ã
    '.KvPUJb', '.iTTPOb',
    // –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
    '[data-identifier="live-caption"]',
    // –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    '.vdk1ce',
    // –≠–ª–µ–º–µ–Ω—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º —Ä–æ–ª–∏
    '[role="complementary"]',
    '[role="log"]'
  ];
  
  // Callback to execute when mutations are observed
  const callback = function(mutationsList, observer) {
    // Prevent processing if we're already doing so to avoid race conditions
    if (isProcessingSubtitles) return;
    isProcessingSubtitles = true;
    
    try {
      // Join all selectors
      const combinedSelector = SUBTITLE_SELECTORS.join(', ');
      const subtitleElements = document.querySelectorAll(combinedSelector);
      
      // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
      if (subtitleElements.length === 0) {
        // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å—É–±—Ç–∏—Ç—Ä—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        document.querySelectorAll('div, span').forEach(element => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
          if (element.childNodes.length <= 3 && element.textContent) {
            const text = element.textContent.trim();
            if (text.length > MIN_LENGTH && !isUIElement(text)) {
              processSubtitleText(text);
            }
          }
        });
      } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        let candidateTexts = [];
        
        subtitleElements.forEach(element => {
          const text = element.textContent || element.innerText || '';
          if (text && text.trim() !== '') {
            candidateTexts.push(text.trim());
          }
        });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ - –æ–±—ã—á–Ω–æ —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —ç—Ç–æ –ø–æ–ª–Ω–∞—è —Ñ—Ä–∞–∑–∞
        candidateTexts.sort((a, b) => b.length - a.length);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–º —Å—É–±—Ç–∏—Ç—Ä–æ–º
        for (const text of candidateTexts) {
          if (isRealSubtitle(text)) {
            processSubtitleText(text);
            break;
          }
        }
      }
    } catch (error) {
      console.error('Error processing subtitles:', error);
    } finally {
      isProcessingSubtitles = false;
    }
  };
  
  // Create an observer instance linked to the callback function
  const observer = new MutationObserver(callback);
  
  // Start observing the target node for configured mutations
  observer.observe(targetNode, config);
  
  console.log('Subtitle observer started');
  
  // Backup check with reduced frequency (every 1.5 seconds)
  setInterval(() => {
    if (isProcessingSubtitles) return;
    isProcessingSubtitles = true;
    
    try {
      const combinedSelector = SUBTITLE_SELECTORS.join(', ');
      const subtitleElements = document.querySelectorAll(combinedSelector);
      
      if (subtitleElements.length > 0) {
        let candidateTexts = [];
        
        subtitleElements.forEach(element => {
          const text = element.textContent || element.innerText || '';
          if (text && text.trim() !== '') {
            candidateTexts.push(text.trim());
          }
        });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ
        candidateTexts.sort((a, b) => b.length - a.length);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–º —Å—É–±—Ç–∏—Ç—Ä–æ–º
        for (const text of candidateTexts) {
          if (isRealSubtitle(text)) {
            processSubtitleText(text);
            break;
          }
        }
      }
    } catch (error) {
      console.error('Error in interval check:', error);
    } finally {
      isProcessingSubtitles = false;
    }
  }, 1500);
}

// Fallback function to try multiple methods of finding subtitles
function findSubtitlesWithDeepScan() {
  console.log('Performing deep scan for subtitle elements');
  
  // Look for elements with specific text patterns that might be subtitles
  document.querySelectorAll('div, span, p').forEach(el => {
    // –¢–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏:
    // - –ú–∏–Ω–∏–º—É–º –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    // - –ò–º–µ—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–π —Ç–µ–∫—Å—Ç
    // - –¢–µ–∫—Å—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
    if (el.childNodes.length <= 3 && el.textContent && 
        el.textContent.trim().length > MIN_LENGTH && 
        el.textContent.trim().length < 200) {
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      if (isUIElement(el.textContent)) return;
      
      // Check if this element changes frequently
      const elId = el.id || Math.random().toString(36).substring(7);
      el.dataset.subtitleScan = elId;
      
      // Watch this element for changes
      const elementObserver = new MutationObserver((mutations) => {
        if (isProcessingSubtitles) return;
        isProcessingSubtitles = true;
        
        try {
          let hasTextChanged = false;
          
          mutations.forEach(mutation => {
            if (mutation.type === 'characterData' || mutation.type === 'childList') {
              hasTextChanged = true;
            }
          });
          
          if (hasTextChanged) {
            const text = el.textContent || el.innerText;
            if (text && text.trim() !== '' && isRealSubtitle(text)) {
              processSubtitleText(text);
            }
          }
        } catch (error) {
          console.error('Error in deep scan observer:', error);
        } finally {
          isProcessingSubtitles = false;
        }
      });
      
      elementObserver.observe(el, {
        characterData: true,
        childList: true,
        subtree: true
      });
    }
  });
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ,
  // –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  const bodyObserver = new MutationObserver((mutations) => {
    mutations.forEach(mutation => {
      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
        mutation.addedNodes.forEach(node => {
          if (node.nodeType === Node.ELEMENT_NODE) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º —Å—É–±—Ç–∏—Ç—Ä–æ–≤
            SUBTITLE_SELECTORS.forEach(selector => {
              try {
                if (node.matches && node.matches(selector) || 
                    node.querySelector && node.querySelector(selector)) {
                  const text = node.textContent || node.innerText;
                  if (text && text.trim() !== '' && isRealSubtitle(text)) {
                    processSubtitleText(text);
                  }
                }
              } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö
              }
            });
          }
        });
      }
    });
  });
  
  bodyObserver.observe(document.body, {
    childList: true,
    subtree: true
  });
}

// Function to detect when Google Meet is fully loaded
function detectGoogleMeet() {
  // Method 1: Check for specific Google Meet elements
  const meetElements = [
    '.c8mVDd',  // Meeting bottom bar
    '.crqnQb',  // Meeting container
    '.rG0ybd',  // Main meeting layout
    '.NzPR9b',  // Video grid
    '.GvcWrd'   // Participants panel
  ];
  
  // Check if any Meet elements exist
  const meetLoaded = meetElements.some(selector => document.querySelector(selector));
  
  if (meetLoaded) {
    console.log('Google Meet interface detected');
    observeSubtitles();
    setTimeout(findSubtitlesWithDeepScan, 5000); // Try deep scan after 5 seconds
    return true;
  }
  
  return false;
}

// Initial check on page load
window.addEventListener('load', () => {
  console.log('Page loaded, waiting for Google Meet interface...');
  
  // Try to detect Google Meet interface immediately
  if (!detectGoogleMeet()) {
    // If not detected, set up periodic checks
    const detectInterval = setInterval(() => {
      if (detectGoogleMeet()) {
        clearInterval(detectInterval);
      }
    }, 1000);
    
    // Safety timeout to clear interval after 60 seconds
    setTimeout(() => {
      clearInterval(detectInterval);
      console.log('Timed out waiting for Google Meet interface. Starting observers anyway.');
      observeSubtitles();
      findSubtitlesWithDeepScan();
    }, 60000);
  }
});

// Setup a mutation observer to detect when Google Meet loads
const bodyObserver = new MutationObserver((mutations) => {
  if (detectGoogleMeet()) {
    bodyObserver.disconnect();
  }
});

bodyObserver.observe(document.body, { childList: true, subtree: true }); 