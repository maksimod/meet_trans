// Google Meet Subtitles Logger
// This script monitors Google Meet subtitle elements and logs them to the console

// –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å –∏—Ö –æ—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤
const SYSTEM_PREFIX = 'üîß SYSTEM: ';
const SUBTITLE_PREFIX = 'üìù ';

// Constants for logging
const DEBUG_PREFIX = '[DEBUG] ';
const MAX_DEBUG_MESSAGES = 15; // Maximum number of debug messages to show
const DEBUG_INTERVAL_MS = 1000; // Minimum time between debug messages in ms

// –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π console.log –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const originalConsoleLog = console.log;

// Custom console.log for filtering debug messages
const consoleLog = function() {
  debugMessageCount++;
  if (debugMessageCount < MAX_DEBUG_MESSAGES) {
    originalConsoleLog.apply(console, arguments);
  } else if (debugMessageCount === MAX_DEBUG_MESSAGES) {
    originalConsoleLog(`[DEBUG LIMIT] –õ–∏–º–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (${MAX_DEBUG_MESSAGES}) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –î–∞–ª—å–Ω–µ–π—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å–∫—Ä—ã—Ç—ã.`);
  }
};

/**
 * –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –≤—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–∏
 */
function limitedDebugLog() {
    const now = Date.now();
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (now - lastDebugLogTime < DEBUG_INTERVAL_MS) {
        return;
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (debugMessageCount >= MAX_DEBUG_MESSAGES) {
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ä–∞–∑
        if (debugMessageCount === MAX_DEBUG_MESSAGES) {
            originalConsoleLog(`[DEBUG LIMIT] –õ–∏–º–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (${MAX_DEBUG_MESSAGES}) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –î–∞–ª—å–Ω–µ–π—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å–∫—Ä—ã—Ç—ã.`);
            debugMessageCount++;
        }
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    debugMessageCount++;
    lastDebugLogTime = now;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
    if (arguments.length > 0 && typeof arguments[0] === 'string') {
        const args = Array.from(arguments);
        args[0] = DEBUG_PREFIX + args[0];
        originalConsoleLog.apply(console, args);
    } else {
        originalConsoleLog.apply(console, arguments);
    }
}

// –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
originalConsoleLog('Google Meet Subtitles Logger started');

// Track previously seen subtitles to avoid duplicates
let seenSubtitles = new Set();
let lastSubtitle = '';
let lastLogTime = 0;
let currentBuffer = '';
let bufferTimer = null;
let isProcessing = false;
// –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
let debugMessageCount = 0;

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
let activeObservers = new Set();
let mainObserver = null;
let lastSubtitleTime = 0;

// Constants for subtitle processing
const MIN_LENGTH = 3;                 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ - —É–º–µ–Ω—å—à–µ–Ω–∞ —Å 10 –¥–æ 3
const BUFFER_DELAY = 1500;            // –ó–∞–¥–µ—Ä–∂–∫–∞ –±—É—Ñ–µ—Ä–∞ (1.5 —Å–µ–∫—É–Ω–¥—ã) - —É–º–µ–Ω—å—à–µ–Ω–∞ —Å 1800
const MIN_LOG_INTERVAL = 500;         // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (0.5 —Å–µ–∫) - —É–º–µ–Ω—å—à–µ–Ω —Å 800
const DUPLICATE_WINDOW_MS = 3000;     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (3 —Å–µ–∫) - —É–º–µ–Ω—å—à–µ–Ω–æ —Å 10 —Å–µ–∫
const SIMILARITY_WINDOW_MS = 1500;    // –û–∫–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ (1.5 —Å–µ–∫) - —É–º–µ–Ω—å—à–µ–Ω–æ —Å 2 —Å–µ–∫
const SIMILARITY_THRESHOLD = 0.85;    // –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤ - —É–º–µ–Ω—å—à–µ–Ω —Å 0.9 (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π)

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
let recentSubtitles = [];
let lastDebugLogTime = 0;

// UI —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å—É–±—Ç–∏—Ç—Ä—ã
const UI_ELEMENTS = [
  'arrow_downward', 'Jump to bottom', 'More options', 'more_vert', 'Present', 'present_to_all',
  'Microphone', 'Camera', 'Join now', 'Leave call', 'Turn on', 'Turn off',
  'mic_', 'videocam', 'settings', 'people', 'chat', 'present_', 'inventory',
  'volume_up', 'check', 'expand_more', 'notifications', 'Ready to join?',
  'Test speakers', 'Use Companion mode', 'Cast this meeting', 'Make a test recording',
  'Cast', 'Other ways', 'Choose activity', 'speaker_', 'Join', 'Leave',
  'Now', 'have joined', 'allowed to', 'hand is', 'camera is', 'microphone is', 
  'desktop notifi', 'is here', 'participants', 'no one',
  // –ù–æ–≤—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  'Apply visual effects', 'Gemini', 'note', 'account', 'Show', 'fewer', 'options',
  'Call ends', 'Switch', 'gmail', 'Apply', 'effect', 'Offer', 'Effects', 'soon',
  'maksumonka', 'comSwitch', 'isn\'t taking', 'Will end', 'Call will',
  'taking notes', 'not taking', 'taking note', 'enable', 'disable', 'caption',
  'filter', 'layout', 'view', 'Raise hand', 'hand (ctrl', 'alt', 'fasteners'
];

// –ö–ª–∞—Å—Å—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã
const SUBTITLE_CLASSES = [
  'CNusmb', 'VbkSUe', 'a4cQT', 'iOzk7', 'TBMuR', 'zTETae', 
  'Mz6pEf', 'n2NWs', 'KvPUJb', 'iTTPOb', 'vdk1ce',
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ Google Meet
  'VfPpkd-gIZYIncW', 'ceZ3VW', 'JIPKlb'
];

// –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ Google Meet
// Google Meet –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É —ç—Ç–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è
const SUBTITLE_SELECTORS = [
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  '.CNusmb', '.VbkSUe', '.a4cQT', '[data-message-text]', 
  '.iOzk7', '.TBMuR', '.zTETae', '.Mz6pEf', '.n2NWs',
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–º–µ—á–µ–Ω—ã
  '.KvPUJb', '.iTTPOb',
  // –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
  '[data-identifier="live-caption"]',
  // –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
  '.vdk1ce',
  // –≠–ª–µ–º–µ–Ω—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º —Ä–æ–ª–∏
  '[role="complementary"]',
  '[role="log"]',
  // –ù–æ–≤—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ Google Meet
  '.VfPpkd-gIZYIncW', '.ceZ3VW', '.JIPKlb', 
  '[jsname="tgaKEf"]', // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
  '[jscontroller="IlfM5e"]', // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  '[data-display-text]', // –ê—Ç—Ä–∏–±—É—Ç —Å —Ç–µ–∫—Å—Ç–æ–º
  '.subtitle-container', // –û–±—â–∏–π –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  '.captions-container', // –ï—â—ë –æ–¥–∏–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π –∫–ª–∞—Å—Å
  '.Pdb3Mc', // –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  // –ù–æ–≤–µ–π—à–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (–∞–ø—Ä–µ–ª—å 2023+)
  '.S6VXfe', '.g0gqYb', '.textLayer', '.WkZsyc', '.PBWx0c',
  '[jsname="YPqjbf"]', '[jscontroller="P7L8k"]',
  // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ–¥–ø–∏—Å–µ–π (–º–∞–π 2023+)
  '.caption-textarea', '.captions-text', '.caption-window',
  '.vjs-text-track-display', '.texttrack-container',
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã 
  'div[role="log"] div', 'div[role="complementary"] div',
  // –ï—â—ë –±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞
  'div[style*="position: absolute"][style*="bottom"]'
];

// –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
let lastCleanupTime = 0;

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function isUIElement(text) {
  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, —ç—Ç–æ –Ω–µ —Å—É–±—Ç–∏—Ç—Ä—ã
  if (!text || text.trim() === '') return true;
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç
  const normalizedText = text.toLowerCase();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∏–ª–∏ –≤–µ–±-–∞–¥—Ä–µ—Å
  if (normalizedText.includes('@') || 
      normalizedText.includes('.com') || 
      normalizedText.includes('.ru') || 
      normalizedText.includes('.net') ||
      normalizedText.includes('.org')) {
    return true;
  }
  
  // –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã —Å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, –≤–µ—Ä–æ—è—Ç–Ω–æ, UI —ç–ª–µ–º–µ–Ω—Ç—ã
  const words = normalizedText.split(/\s+/).filter(w => w.length > 0);
  if (words.length === 1 && words[0].length < 15) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞)
  for (const element of UI_ELEMENTS) {
    if (normalizedText.includes(element.toLowerCase())) {
      return true;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  if (
    normalizedText.includes('–º–∏–∫—Ä–æ—Ñ–æ–Ω') || 
    normalizedText.includes('–¥–∏–Ω–∞–º–∏–∫') || 
    normalizedText.includes('–∫–∞–º–µ—Ä') ||
    normalizedText.includes('–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü') ||
    normalizedText.includes('—Å–æ–µ–¥–∏–Ω–µ–Ω–∏') ||
    normalizedText.includes('–ø—Ä–∏—Å–æ–µ–¥') ||
    normalizedText.includes('–ø–æ–∫–∏–Ω—É—Ç—å') ||
    normalizedText.includes('—É–≤–µ–¥–æ–º–ª–µ–Ω') ||
    normalizedText.includes('–≤–æ–π—Ç–∏') ||
    normalizedText.includes('–≤—ã–π—Ç–∏') ||
    normalizedText.includes('—ç—Ñ—Ñ–µ–∫—Ç') ||
    normalizedText.includes('–∑–∞–ø–∏—Å—å') ||
    normalizedText.includes('–∑–∞–ø–∏—Å') ||
    normalizedText.includes('–∑–≤–æ–Ω–æ–∫') ||
    normalizedText.includes('–∑–≤—É–∫') ||
    normalizedText.includes('–≤–∏–¥–µ–æ') ||
    normalizedText.includes('—ç–∫—Ä–∞–Ω') ||
    normalizedText.includes('–Ω–∞—Å—Ç—Ä–æ–π–∫') ||
    normalizedText.includes('–¥–µ–ª–∏—Ç') ||
    normalizedText.includes('–ø–æ–∫–∞–∑')
  ) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫ (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∫–æ–Ω–æ–∫)
  if (
    normalizedText.includes('_') ||      // –ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –∏–∫–æ–Ω–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    /^[a-z_]+$/.test(normalizedText) ||  // –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    normalizedText.length < 10 && !normalizedText.includes(' ') // –ö–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
  ) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const specialCharsCount = (normalizedText.match(/[^a-zA-Z–∞-—è–ê-–Ø0-9\s.,!?]/g) || []).length;
  if (specialCharsCount > 5 && specialCharsCount / normalizedText.length > 0.3) {
    return true;
  }
  
  return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ DOM-—ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º —Å—É–±—Ç–∏—Ç—Ä–æ–≤
function isSubtitleContainer(element) {
  // –ù–∏—á—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  if (!element || !element.classList) return false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏ –∫–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å—É–±—Ç–∏—Ç—Ä—ã
  if (
    element.hasAttribute('data-message-text') ||
    element.hasAttribute('data-identifier') ||
    element.getAttribute('role') === 'log' ||
    element.getAttribute('role') === 'complementary'
  ) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã
  for (const cls of SUBTITLE_CLASSES) {
    if (element.classList.contains(cls)) {
      return true;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–¥–æ 3 —É—Ä–æ–≤–Ω–µ–π –≤–≤–µ—Ä—Ö)
  let parent = element.parentElement;
  let level = 0;
  while (parent && level < 3) {
    if (
      parent.hasAttribute('data-message-text') ||
      parent.hasAttribute('data-identifier') ||
      parent.getAttribute('role') === 'log' ||
      parent.getAttribute('role') === 'complementary'
    ) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    for (const cls of SUBTITLE_CLASSES) {
      if (parent.classList && parent.classList.contains(cls)) {
        return true;
      }
    }
    
    parent = parent.parentElement;
    level++;
  }
  
  return false;
}

// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
function isRealSubtitle(text) {
  // –ù–∞—Å—Ç–æ—è—â–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã –æ–±—ã—á–Ω–æ:
  // 1. –ò–º–µ—é—Ç —Ä–∞–∑—É–º–Ω—É—é –¥–ª–∏–Ω—É
  // 2. –ù–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–∏–ø–∏—á–Ω—ã—Ö UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  // 3. –ò–º–µ—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —è–≤–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤ - –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ,
  // –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–µ—á–∏, —Å—á–∏—Ç–∞–µ–º –∏—Ö —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
  const normalizedText = text.toLowerCase();
  const speechIndicators = [
    "hello", "hi", "hey", "yes", "no", "yeah", "okay", "ok", "thanks", "thank you",
    "–ø—Ä–∏–≤–µ—Ç", "–¥–∞", "–Ω–µ—Ç", "—Å–ø–∞—Å–∏–±–æ", "—Ö–æ—Ä–æ—à–æ", "–ª–∞–¥–Ω–æ", "–ø–æ–∫–∞"
  ];
  
  // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ—á–∏, –ø—Ä–∏–Ω–∏–º–∞–µ–º –µ–≥–æ –∫–∞–∫ —Å—É–±—Ç–∏—Ç—Ä
  for (const indicator of speechIndicators) {
    if (normalizedText === indicator || 
        normalizedText.startsWith(indicator + " ") || 
        normalizedText.endsWith(" " + indicator) ||
        normalizedText.includes(" " + indicator + " ")) {
      return true;
    }
  }
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç UI —ç–ª–µ–º–µ–Ω—Ç–æ–º
  if (isUIElement(text)) return false;
  
  // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–ø—Ä–æ—Å—Ç–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Å–ª–æ–≤)
  if (text.length < MIN_LENGTH) return false;
  
  // –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —Ç–æ–∂–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥
  if (text.length > 500) return false;
  
  // –°—É–±—Ç–∏—Ç—Ä—ã –æ–±—ã—á–Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç HTML-—Ç–µ–≥–æ–≤
  if (text.includes('<') && text.includes('>')) return false;
  
  // –°–º—è–≥—á–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤
  const words = text.split(/\s+/).filter(word => word.length > 0);
  if (words.length < 1) return false; // –°—É–±—Ç–∏—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 1 —Å–ª–æ–≤–æ
  
  // –°–º—è–≥—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±—É–∫–≤ –∫ –Ω–µ-–±—É–∫–≤–∞–º
  const letters = text.match(/[a-zA-Z–∞-—è–ê-–Ø0-9]/g) || []; // –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—ã –∫–∞–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
  const nonLetters = text.match(/[^a-zA-Z–∞-—è–ê-–Ø0-9\s]/g) || [];
  if (letters.length === 0 || nonLetters.length / (letters.length + 1) > 0.8) { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ —Å 0.7 –¥–æ 0.8
    return false;
  }
  
  return true;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏
 * –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Ö —Å—Ö–æ–∂–µ—Å—Ç–∏
 */
function levenshteinDistance(s1, s2) {
    if (s1.length === 0) return s2.length;
    if (s2.length === 0) return s1.length;

    const matrix = [];

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã
    for (let i = 0; i <= s1.length; i++) {
        matrix[i] = [i];
    }

    for (let j = 0; j <= s2.length; j++) {
        matrix[0][j] = j;
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
    for (let i = 1; i <= s1.length; i++) {
        for (let j = 1; j <= s2.length; j++) {
            const cost = s1[i - 1] === s2[j - 1] ? 0 : 1;
            matrix[i][j] = Math.min(
                matrix[i - 1][j] + 1,       // —É–¥–∞–ª–µ–Ω–∏–µ
                matrix[i][j - 1] + 1,       // –≤—Å—Ç–∞–≤–∫–∞
                matrix[i - 1][j - 1] + cost // –∑–∞–º–µ–Ω–∞ –∏–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            );
        }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    return matrix[s1.length][s2.length];
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–≤–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Ö–æ–∂–∏–º–∏
 * –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä–æ–≥–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏
 */
function isSimilarText(text1, text2) {
    if (!text1 || !text2) return false;
    
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    if (text1.length < 10 || text2.length < 10) {
        // –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é)
        const cleanText1 = text1.replace(/[^\w\s]/g, '').toLowerCase();
        const cleanText2 = text2.replace(/[^\w\s]/g, '').toLowerCase();
        return cleanText1 === cleanText2;
    }
    
    // –î–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
    const maxLength = Math.max(text1.length, text2.length);
    if (maxLength === 0) return true;
    
    const distance = levenshteinDistance(text1.toLowerCase(), text2.toLowerCase());
    const similarity = 1 - distance / maxLength;
    
    return similarity >= SIMILARITY_THRESHOLD;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ö–æ–∂–µ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–µ—á—å
 * –¢–µ–∫—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–µ—á—å—é, –µ—Å–ª–∏ –≤ –Ω–µ–º –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞
 * –∏–ª–∏ –µ—Å—Ç—å –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (–∫—Ä–æ–º–µ —Å–∫–æ–±–æ–∫ –∏ –∫–∞–≤—ã—á–µ–∫)
 */
function looksLikeSpeech(text) {
    if (!text) return false;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –¥–≤—É—Ö —Å–ª–æ–≤
    const words = text.trim().split(/\s+/).filter(word => word.length > 0);
    if (words.length >= 2) return true;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (–∫—Ä–æ–º–µ —Å–∫–æ–±–æ–∫ –∏ –∫–∞–≤—ã—á–µ–∫)
    const hasPunctuation = /[.,:;!?]/.test(text);
    return hasPunctuation;
}

/**
 * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã
 */
function clearOldSubtitles() {
    const now = Date.now();
    
    // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã
    if (now - lastCleanupTime < 5000) return;
    
    lastCleanupTime = now;
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É–±—Ç–∏—Ç—Ä—ã —Å—Ç–∞—Ä—à–µ DUPLICATE_WINDOW_MS
    const oldestValidTime = now - DUPLICATE_WINDOW_MS;
    recentSubtitles = recentSubtitles.filter(item => item.timestamp >= oldestValidTime);
    
    // –û—á–∏—â–∞–µ–º Set —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
    if (seenSubtitles.size > 1000) {
        seenSubtitles.clear();
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–º –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–∏–º –Ω–∞ –Ω–µ–¥–∞–≤–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã
 */
function isDuplicate(text, isExactCheck = false) {
    const now = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    for (const item of recentSubtitles) {
        // –î–ª—è —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –±–æ–ª–µ–µ –¥–æ–ª–≥–æ–µ –æ–∫–Ω–æ
        if (item.text === text) {
            const timeDiff = now - item.timestamp;
            if (timeDiff < DUPLICATE_WINDOW_MS) {
                return true;
            }
        }
        
        // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å—Ö–æ–∂–µ—Å—Ç—å - –º–µ–Ω—å—à–µ–µ –æ–∫–Ω–æ
        if (!isExactCheck && isSimilarText(item.text, text)) {
            const timeDiff = now - item.timestamp;
            if (timeDiff < SIMILARITY_WINDOW_MS) {
                return true;
            }
        }
    }
    
    return false;
}

// Debug function that respects the message limit
function debug(message) {
  debugMessageCount++;
  if (debugMessageCount < MAX_DEBUG_MESSAGES) {
    originalConsoleLog(DEBUG_PREFIX + message);
  } else if (debugMessageCount === MAX_DEBUG_MESSAGES) {
    originalConsoleLog(`[DEBUG LIMIT] –õ–∏–º–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (${MAX_DEBUG_MESSAGES}) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –î–∞–ª—å–Ω–µ–π—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å–∫—Ä—ã—Ç—ã.`);
  }
}

function logWithDebug(message, debugMessage = null) {
  if (debugMessage) {
    debugMessageCount++;
    if (debugMessageCount < MAX_DEBUG_MESSAGES) {
      originalConsoleLog(DEBUG_PREFIX + debugMessage);
    } else if (debugMessageCount === MAX_DEBUG_MESSAGES) {
      originalConsoleLog(`[DEBUG LIMIT] –õ–∏–º–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (${MAX_DEBUG_MESSAGES}) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –î–∞–ª—å–Ω–µ–π—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å–∫—Ä—ã—Ç—ã.`);
    }
  }
  originalConsoleLog(message);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
 */
function processSubtitleText(text, forceSimilar = false) {
    if (!text) return false;
    
    // Debug message for subtitle processing
    debugMessageCount++;
    if (debugMessageCount < MAX_DEBUG_MESSAGES) {
        debug(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: "${text}"`);
    }
    
    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞, –≤—ã—Ö–æ–¥–∏–º
    if (isProcessing) return;
    isProcessing = true;
    
    try {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã
        if (!text || text.length < MIN_LENGTH) {
            return;
        }
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
        clearOldSubtitles();
        
        const now = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        if (isDuplicate(text, true)) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –Ω–æ –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —à—É–º
            return;
        }
        
        // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —è–≤–Ω–æ –ø–æ—Ö–æ–∂ –Ω–∞ —Ä–µ—á—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—Ö–æ–∂–µ—Å—Ç—å
        const isSpeech = looksLikeSpeech(text);
        
        // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ —Ä–µ—á—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ö–æ–∂–µ—Å—Ç—å
        if (!isSpeech && isDuplicate(text)) {
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
        if (now - lastSubtitleTime < MIN_LOG_INTERVAL) {
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        recentSubtitles.push({
            text: text,
            timestamp: now
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—É–±—Ç–∏—Ç—Ä–∞
        lastSubtitleTime = now;
        lastSubtitle = text;
        
        // –í—ã–≤–æ–¥–∏–º —Å—É–±—Ç–∏—Ç—Ä—ã
        console.log(SUBTITLE_PREFIX + text);
    } finally {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        isProcessing = false;
    }
}

// –†–∞–∑–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∑–Ω–∞–∫–∞–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
function splitIntoSentences(text) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ –∑–Ω–∞–∫–∞–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  const sentences = [];
  
  // –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –∑–Ω–∞–∫–∞–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
  const regex = /[.!?;]+/g;
  let match;
  let lastIndex = 0;
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
  while ((match = regex.exec(text)) !== null) {
    const sentence = text.substring(lastIndex, match.index + match[0].length).trim();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
    if (sentence && sentence.length >= MIN_LENGTH) {
      sentences.push(sentence);
    }
    
    lastIndex = match.index + match[0].length;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
  if (lastIndex < text.length) {
    const remainingText = text.substring(lastIndex).trim();
    if (remainingText && remainingText.length >= MIN_LENGTH) {
      sentences.push(remainingText);
    }
  }
  
  // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
  return sentences.length > 0 ? sentences : [text];
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
function cleanupInactiveObservers() {
  originalConsoleLog(`Cleaning up observers: ${activeObservers.size} active observers`);
  
  // –í–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
  for (const observer of activeObservers) {
    if (observer !== mainObserver && typeof observer.disconnect === 'function') {
      observer.disconnect();
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–º, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const newObservers = new Set();
  if (mainObserver) {
    newObservers.add(mainObserver);
  }
  activeObservers = newObservers;
  
  originalConsoleLog(`After cleanup: ${activeObservers.size} active observers`);
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
function restartObservers() {
  originalConsoleLog('Restarting subtitle observers');
  
  // –§–∏–∫—Å–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
  isProcessing = false;
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å–Ω–æ–≤–Ω–æ–π
  if (mainObserver && typeof mainObserver.disconnect === 'function') {
    // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å
    mainObserver.disconnect();
  }
  
  // –°–Ω–æ–≤–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
  const stopFn = observeSubtitles();
  
  // –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  setTimeout(findSubtitlesWithDeepScan, 2000);
  setTimeout(scanForSubtitles, 5000);
  
  originalConsoleLog('Observers restarted successfully');
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
setInterval(() => {
  if (seenSubtitles.size > 30) {
    const recent = Array.from(seenSubtitles).slice(-20);
    seenSubtitles.clear();
    recent.forEach(sub => seenSubtitles.add(sub));
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–æ—Å—å –ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  const now = Date.now();
  if (now - lastSubtitleTime > 30000) {
    originalConsoleLog('No subtitles detected for a while, restarting observers...');
    restartObservers();
    lastSubtitleTime = now; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
  }
}, 20000);

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º
setInterval(restartObservers, 15000);

// Function to observe subtitles
function observeSubtitles() {
  originalConsoleLog('Starting subtitle observation');
  
  // The main container where subtitles appear in Google Meet
  const targetNode = document.body;
  
  // Observer configuration
  const config = { 
    childList: true, 
    subtree: true, 
    characterData: true
  };
  
  // Callback to execute when mutations are observed
  const callback = function(mutationsList, observer) {
    // Prevent processing if we're already doing so to avoid race conditions
    if (isProcessing) return;
    isProcessing = true;
    
    try {
      // Join all selectors
      const combinedSelector = SUBTITLE_SELECTORS.join(', ');
      const subtitleElements = document.querySelectorAll(combinedSelector);
      
      // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
      if (subtitleElements.length === 0) {
        // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å—É–±—Ç–∏—Ç—Ä—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        document.querySelectorAll('div, span').forEach(element => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
          if (element.childNodes.length <= 3 && element.textContent) {
            const text = element.textContent.trim();
            if (text.length > MIN_LENGTH && !isUIElement(text)) {
              processSubtitleText(text);
            }
          }
        });
      } else {
        if (debugMessageCount < MAX_DEBUG_MESSAGES) {
          limitedDebugLog(`Found ${subtitleElements.length} potential subtitle elements`);
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        let candidateTexts = [];
        
        subtitleElements.forEach(element => {
          const text = element.textContent || element.innerText || '';
          if (text && text.trim() !== '') {
            candidateTexts.push(text.trim());
          }
        });
        
        if (debugMessageCount < MAX_DEBUG_MESSAGES) {
          limitedDebugLog(`Found ${candidateTexts.length} candidate texts`);
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π
        for (const text of candidateTexts) {
          if (isRealSubtitle(text)) {
            processSubtitleText(text);
          }
        }
      }
    } catch (error) {
      originalConsoleLog('Error processing subtitles:', error);
    } finally {
      // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      isProcessing = false;
    }
  };
  
  // Create an observer instance linked to the callback function
  const observer = new MutationObserver(callback);
  
  // Start observing the target node for configured mutations
  observer.observe(targetNode, config);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å
  mainObserver = observer;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –≤ –Ω–∞–±–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö
  if (!activeObservers.has(mainObserver)) {
    activeObservers.add(mainObserver);
  }
  
  originalConsoleLog('Subtitle observer started');
  
  // Backup check with reduced frequency
  const intervalID = setInterval(() => {
    if (isProcessing) return;
    isProcessing = true;
    
    try {
      const combinedSelector = SUBTITLE_SELECTORS.join(', ');
      const subtitleElements = document.querySelectorAll(combinedSelector);
      
      if (subtitleElements.length > 0) {
        if (debugMessageCount < MAX_DEBUG_MESSAGES) {
          limitedDebugLog(`Interval check: Found ${subtitleElements.length} subtitle elements`);
        }
        
        let candidateTexts = [];
        
        subtitleElements.forEach(element => {
          const text = element.textContent || element.innerText || '';
          if (text && text.trim() !== '') {
            candidateTexts.push(text.trim());
          }
        });
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π
        for (const text of candidateTexts) {
          if (isRealSubtitle(text)) {
            processSubtitleText(text);
          }
        }
      }
    } catch (error) {
      originalConsoleLog('Error in interval check:', error);
    } finally {
      isProcessing = false;
    }
  }, 500);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã
  return () => {
    clearInterval(intervalID);
  };
}

// Fallback function to try multiple methods of finding subtitles
function findSubtitlesWithDeepScan() {
  originalConsoleLog('Performing deep scan for subtitle elements');
  
  // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –∫ –Ω–∏–∂–Ω–µ–º—É –∫—Ä–∞—é —ç–∫—Ä–∞–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º
  // –≠—Ç–æ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  const bottomPositionedElements = [];
  document.querySelectorAll('div, span, p').forEach(el => {
    const rect = el.getBoundingClientRect();
    // –ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
    if (rect.top > window.innerHeight * 0.7 && 
        rect.bottom < window.innerHeight && 
        rect.width > 100 &&
        el.textContent && 
        el.textContent.trim().length > MIN_LENGTH) {
      
      bottomPositionedElements.push({
        element: el,
        y: rect.bottom,  // –ü–æ–∑–∏—Ü–∏—è –æ—Ç –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è —ç–∫—Ä–∞–Ω–∞
        x: rect.left,    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        width: rect.width,
        text: el.textContent.trim()
      });
    }
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –Ω–∏–∂–Ω–µ–≥–æ –∫—Ä–∞—è (–±–ª–∏–∂–∞–π—à–∏–µ –∫ –Ω–∏–∑—É –ø–µ—Ä–≤—ã–º–∏)
  bottomPositionedElements.sort((a, b) => b.y - a.y);
  
  // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∞–º—ã–µ –Ω–∏–∂–Ω–∏–µ
  if (bottomPositionedElements.length > 0) {
    originalConsoleLog(`Found ${bottomPositionedElements.length} elements positioned at the bottom of the screen`);
    
    // –ë–µ—Ä–µ–º 5 —Å–∞–º—ã—Ö –Ω–∏–∂–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const probableSubtitles = bottomPositionedElements.slice(0, 5);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã
    for (const item of probableSubtitles) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–±—Ç–∏—Ç—Ä–∞–º
      if (!isUIElement(item.text)) {
        originalConsoleLog(`Found bottom-positioned element with text: "${item.text.substring(0, 30)}..."`);
        processSubtitleText(item.text);
        
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ —ç—Ç–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const observer = new MutationObserver((mutations) => {
          mutations.forEach(mutation => {
            if (mutation.type === 'characterData' || mutation.type === 'childList') {
              const newText = item.element.textContent.trim();
              if (newText && newText !== item.text) {
                processSubtitleText(newText);
              }
            }
          });
        });
        
        observer.observe(item.element, {
          characterData: true,
          childList: true,
          subtree: true
        });
        
        activeObservers.add(observer);
      }
    }
  }
  
  // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å "–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏" —Å—Ç–∏–ª—è–º–∏
  // Google Meet –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  document.querySelectorAll('div[style*="transform"], div[style*="absolute"]').forEach(el => {
    const style = window.getComputedStyle(el);
    const text = el.textContent.trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∏—á–Ω—ã–º —Å—Ç–∏–ª—è–º —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    const isSubtitleStyled = (
      (style.position === 'absolute' && parseInt(style.bottom || '0') < 150) ||
      (style.transform && style.transform.includes('translate')) ||
      (el.className && SUBTITLE_CLASSES.some(cls => el.className.includes(cls)))
    );
    
    if (isSubtitleStyled && text && text.length > MIN_LENGTH && !isUIElement(text)) {
      originalConsoleLog(`Found element with subtitle-like styling: "${text.substring(0, 30)}..."`);
      processSubtitleText(text);
      
      // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
      const styleObserver = new MutationObserver((mutations) => {
        mutations.forEach(mutation => {
          const newText = el.textContent.trim();
          if (newText && newText !== text && newText.length > MIN_LENGTH) {
            processSubtitleText(newText);
          }
        });
      });
      
      styleObserver.observe(el, {
        characterData: true,
        childList: true,
        subtree: true
      });
      
      activeObservers.add(styleObserver);
    }
  });

  // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: Google Meet –∏–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç data-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  document.querySelectorAll('[data-message-text], [data-spotlight-subtitle],' + 
                           '[data-original-text], [data-text-content],' +
                           '[data-caption-text], [data-subtitle]').forEach(el => {
    const text = el.textContent.trim() || 
                 el.getAttribute('data-message-text') || 
                 el.getAttribute('data-original-text') || 
                 el.getAttribute('data-text-content') ||
                 el.getAttribute('data-caption-text') ||
                 el.getAttribute('data-subtitle') ||
                 el.getAttribute('data-spotlight-subtitle');
    
    if (text && text.length > MIN_LENGTH && !isUIElement(text)) {
      originalConsoleLog(`Found element with subtitle data attribute: "${text.substring(0, 30)}..."`);
      processSubtitleText(text);
      
      // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
      const attrObserver = new MutationObserver((mutations) => {
        mutations.forEach(mutation => {
          if (mutation.type === 'attributes' && 
              (mutation.attributeName.startsWith('data-') || 
               mutation.attributeName === 'textContent')) {
            const newText = el.textContent.trim() || 
                           el.getAttribute('data-message-text') || 
                           el.getAttribute('data-original-text') ||
                           el.getAttribute('data-text-content') ||
                           el.getAttribute('data-caption-text') ||
                           el.getAttribute('data-subtitle') ||
                           el.getAttribute('data-spotlight-subtitle');
            if (newText && newText !== text && newText.length > MIN_LENGTH) {
              processSubtitleText(newText);
            }
          } else if (mutation.type === 'characterData' || mutation.type === 'childList') {
            const newText = el.textContent.trim();
            if (newText && newText !== text && newText.length > MIN_LENGTH) {
              processSubtitleText(newText);
            }
          }
        });
      });
      
      attrObserver.observe(el, {
        attributes: true,
        attributeFilter: ['data-message-text', 'data-original-text', 'data-text-content',
                          'data-caption-text', 'data-subtitle', 'data-spotlight-subtitle'],
        characterData: true,
        childList: true,
        subtree: true
      });
      
      activeObservers.add(attrObserver);
    }
  });
  
  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const textElements = Array.from(document.querySelectorAll('div, span, p'))
    .filter(el => {
      const text = el.textContent?.trim();
      return text && text.length > MIN_LENGTH && text.length < 300;
    });
  
  originalConsoleLog(`Deep scan found ${textElements.length} potential text elements`);
  
  // Examine each element for subtitle-like characteristics
  for (const el of textElements) {
    const text = el.textContent.trim();
    
    // Skip obvious UI elements
    if (isUIElement(text)) continue;
    
    // Check for subtitle characteristics
    if (text.split(' ').length >= 3 && // Has multiple words
        /[a-zA-Z–∞-—è–ê-–Ø]{3,}/.test(text) && // Has words with letters
        el.children.length <= 2) { // Not complex nested content
      
      // Analyze position - subtitles often at the bottom of the screen
      const rect = el.getBoundingClientRect();
      const isNearBottom = (window.innerHeight - rect.bottom) < 200;
      const isCentered = Math.abs(rect.left - (window.innerWidth / 2 - rect.width / 2)) < 200;
      
      // Process if it looks like a subtitle or observe if we're not sure
      if (isRealSubtitle(text) || (isNearBottom && isCentered)) {
        processSubtitleText(text);
        
        // Observe this element for changes
        const elementObserver = new MutationObserver((mutations) => {
          mutations.forEach(mutation => {
            if (mutation.type === 'characterData' || mutation.type === 'childList') {
              const newText = el.textContent.trim();
              if (newText.length >= MIN_LENGTH && !isUIElement(newText)) {
                processSubtitleText(newText);
              }
            }
          });
        });
        
        elementObserver.observe(el, {
          characterData: true,
          childList: true,
          subtree: true
        });
        
        // Add to active observers
        activeObservers.add(elementObserver);
      }
    }
  }
  
  // Force periodic re-scan to catch changes
  setTimeout(findSubtitlesWithDeepScan, 15000);
}

// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
function scanForSubtitles() {
  // –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ div —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç
  const allElements = document.querySelectorAll('div, span, p');
  originalConsoleLog(`Scanning ${allElements.length} elements for subtitles...`);
  
  let foundSubtitles = false;
  let observerCount = 0;
  
  allElements.forEach(el => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ/–±–æ–ª—å—à–∏–µ
    if (!el.textContent || 
        el.textContent.trim().length < MIN_LENGTH || 
        el.textContent.trim().length > 200) {
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    const text = el.textContent.trim();
    
    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç UI —ç–ª–µ–º–µ–Ω—Ç–æ–º
    if (!isUIElement(text)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º —Å—É–±—Ç–∏—Ç—Ä–æ–≤
      if (text.split(' ').length >= 2 && // –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞
          /[a-zA-Z–∞-—è–ê-–Ø]{3,}/.test(text)) { // –º–∏–Ω–∏–º—É–º 3 –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        if (observerCount > 100) return;
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—É–±—Ç–∏—Ç—Ä—ã, –Ω–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        const observer = new MutationObserver((mutations) => {
          mutations.forEach(mutation => {
            if (mutation.type === 'characterData' || mutation.type === 'childList') {
              const newText = el.textContent.trim();
              if (newText.length >= MIN_LENGTH && !isUIElement(newText)) {
                processSubtitleText(newText);
              }
            }
          });
        });
        
        observerCount++;
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
        observer.observe(el, {
          characterData: true,
          childList: true, 
          subtree: true
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –≤ –Ω–∞–±–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö
        activeObservers.add(observer);
        
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        if (isRealSubtitle(text)) {
          processSubtitleText(text);
          foundSubtitles = true;
        }
      }
    }
  });
  
  originalConsoleLog(`Aggressive scan complete. Found subtitles: ${foundSubtitles}, observers: ${observerCount}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–µ–º –ª–∏ –º—ã —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
  if (activeObservers.size > 300) {
    originalConsoleLog('Too many observers, cleaning up...');
    cleanupInactiveObservers();
    setTimeout(scanForSubtitles, 1000); // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
  } else {
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥
    setTimeout(scanForSubtitles, 20000);
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞
function captureSubtitlesFromVideoElement() {
  // –í Google Meet —Å—É–±—Ç–∏—Ç—Ä—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –≤–∏–¥–µ TextTrack –Ω–∞ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–µ
  const videoElements = document.querySelectorAll('video');
  
  videoElements.forEach(video => {
    // –ï—Å–ª–∏ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–æ—Ä–æ–∂–∫–∏
    if (video.textTracks && video.textTracks.length > 0) {
      originalConsoleLog(`Found video element with ${video.textTracks.length} text tracks`);
      
      // –î–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–∏
      for (let i = 0; i < video.textTracks.length; i++) {
        const track = video.textTracks[i];
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–æ—Ä–æ–∂–∫—É
        track.mode = 'showing';
        
        // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–µ–ø–ª–∏–∫
        track.addEventListener('cuechange', () => {
          if (track.activeCues && track.activeCues.length > 0) {
            for (let j = 0; j < track.activeCues.length; j++) {
              const cue = track.activeCues[j];
              if (cue.text && cue.text.trim()) {
                processSubtitleText(cue.text.trim());
              }
            }
          }
        });
        
        originalConsoleLog(`Activated text track: ${track.label || 'Unnamed track'}`);
      }
    }
  });
  
  // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º iframe, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∏–¥–µ–æ
  document.querySelectorAll('iframe').forEach(iframe => {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É iframe
      const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
      const iframeVideos = iframeDoc.querySelectorAll('video');
      
      if (iframeVideos.length > 0) {
        originalConsoleLog(`Found ${iframeVideos.length} video elements in iframe`);
        
        iframeVideos.forEach(video => {
          if (video.textTracks && video.textTracks.length > 0) {
            for (let i = 0; i < video.textTracks.length; i++) {
              const track = video.textTracks[i];
              track.mode = 'showing';
              
              track.addEventListener('cuechange', () => {
                if (track.activeCues && track.activeCues.length > 0) {
                  for (let j = 0; j < track.activeCues.length; j++) {
                    const cue = track.activeCues[j];
                    if (cue.text && cue.text.trim()) {
                      processSubtitleText(cue.text.trim());
                    }
                  }
                }
              });
            }
          }
        });
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã–º iframe
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ Google Meet
function directCaptureSubtitles() {
  originalConsoleLog('Attempting direct capture of Google Meet subtitles');
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
  // –≠—Ç–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–∞—Ü–µ–ª–µ–Ω—ã –Ω–∞ —Å–∞–º—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  const priorityContainers = [
    // –ì–ª–∞–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏)
    '.a4cQT', '.VbkSUe', '.CNusmb', '.Pdb3Mc', 
    '[jsname="tgaKEf"]', '[data-allow-page-navigation="true"]',
    '.r91Hhe'
  ];
  
  // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
  for (const selector of priorityContainers) {
    const containers = document.querySelectorAll(selector);
    
    if (containers.length > 0) {
      originalConsoleLog(`Found ${containers.length} primary subtitle containers with selector ${selector}`);
      
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      containers.forEach(container => {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
        const text = container.textContent?.trim();
        if (text && text.length > MIN_LENGTH) {
          // –§–æ—Ä—Å–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ —Å—É–±—Ç–∏—Ç—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
          originalConsoleLog(SUBTITLE_PREFIX + text);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—É–±—Ç–∏—Ç—Ä–∞
          lastSubtitleTime = Date.now();
          lastSubtitle = text;
          seenSubtitles.add(text);
          
          // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
          const priorityObserver = new MutationObserver((mutations) => {
            for (const mutation of mutations) {
              if (mutation.type === 'characterData' || mutation.type === 'childList') {
                const newText = container.textContent?.trim();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –æ–Ω
                if (newText && newText !== text && newText.length > MIN_LENGTH) {
                  // –ü—Ä—è–º–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å, –º–∏–Ω—É—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                  // –¥–ª—è –≤–∞–∂–Ω–µ–π—à–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                  originalConsoleLog(SUBTITLE_PREFIX + newText);
                  lastSubtitleTime = Date.now();
                  lastSubtitle = newText;
                  seenSubtitles.add(newText);
                }
              }
            }
          });
          
          // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
          priorityObserver.observe(container, {
            characterData: true,
            childList: true,
            subtree: true
          });
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏
          activeObservers.add(priorityObserver);
        }
      });
    }
  }
  
  // –ü—Ä—è–º–∞—è —Å–µ–ª–µ–∫—Ü–∏—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ Google Meet
  const knownContainers = [
    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (–Ω–∏–∂–Ω–∏–π)
    'div[jscontroller="IlfM5e"]',
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∏–∂–Ω–∏—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    'div[data-allow-page-navigation="true"]',
    // –î—Ä—É–≥–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    '.Pdb3Mc', '.a4cQT', '.VbkSUe', '.CNusmb',
    // –≠–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    '[jsname="tgaKEf"]', '[data-message-text]',
    // –ù–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (2023+)
    'div[jscontroller="gJT9L"]', 'div[jscontroller="mgUFIb"]',
    // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
    'div[role="log"]', 'div[role="region"][aria-live="polite"]'
  ];
  
  // –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ –≤—Å–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
  for (const selector of knownContainers) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö
    if (priorityContainers.includes(selector)) continue;
    
    const containers = document.querySelectorAll(selector);
    
    if (containers.length > 0) {
      limitedDebugLog(`Found ${containers.length} direct subtitle containers with selector ${selector}`);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      containers.forEach(container => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const text = container.textContent?.trim();
        if (text && text.length > MIN_LENGTH && !isUIElement(text)) {
          processSubtitleText(text);
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–æ—â–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞
        const directObserver = new MutationObserver((mutations) => {
          for (const mutation of mutations) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if (mutation.type === 'characterData' || mutation.type === 'childList') {
              const currentText = container.textContent?.trim();
              if (currentText && currentText.length > MIN_LENGTH && !isUIElement(currentText)) {
                // –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                processSubtitleText(currentText);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—É–±—Ç–∏—Ç—Ä–∞
                lastSubtitleTime = Date.now();
              }
            }
          }
        });
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º –∏ –≤—Å–µ–º–∏ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        directObserver.observe(container, {
          characterData: true,
          childList: true,
          subtree: true,
          attributes: true
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –≤ –Ω–∞–±–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö
        activeObservers.add(directObserver);
      });
    }
  }
  
  // –¢–∞–∫–∂–µ –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã –ø–æ –∏—Ö –ø–æ–ª–æ–∂–µ–Ω–∏—é
  // Google Meet –æ–±—ã—á–Ω–æ —Ä–∞–∑–º–µ—â–∞–µ—Ç —Å—É–±—Ç–∏—Ç—Ä—ã –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
  const possibleContainers = document.querySelectorAll('div:not([data-is-scanned])');
  let scannedCount = 0;
  
  possibleContainers.forEach(element => {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (scannedCount > 100) return;
    
    // –û—Ç–º–µ—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π
    element.dataset.isScanned = 'true';
    scannedCount++;
    
    const rect = element.getBoundingClientRect();
    
    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏—Ä–æ–∫–∏–π
    if (rect.bottom > window.innerHeight * 0.6 &&
        rect.width > window.innerWidth * 0.3 &&
        rect.height < 100) { // –°—É–±—Ç–∏—Ç—Ä—ã –æ–±—ã—á–Ω–æ –Ω–µ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ
      
      const text = element.textContent?.trim();
      if (text && text.length > MIN_LENGTH && !isUIElement(text)) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–µ—á–∏
        const speechLike = text.split(/[.!?]/g).length > 1 || // –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                           /[a-zA-Z–∞-—è–ê-–Ø]{3,}/.test(text);   // –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞
        
        if (speechLike) {
          // –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ä–µ—á—å - –ø—Ä—è–º–æ–π –≤—ã–≤–æ–¥
          originalConsoleLog(SUBTITLE_PREFIX + text);
          lastSubtitleTime = Date.now();
          seenSubtitles.add(text);
        } else {
          processSubtitleText(text);
        }
        
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ —ç—Ç–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        const positionObserver = new MutationObserver((mutations) => {
          for (const mutation of mutations) {
            if (mutation.type === 'characterData' || mutation.type === 'childList') {
              const newText = element.textContent?.trim();
              if (newText && newText.length > MIN_LENGTH && !isUIElement(newText)) {
                processSubtitleText(newText);
              }
            }
          }
        });
        
        positionObserver.observe(element, {
          characterData: true,
          childList: true,
          subtree: true
        });
        
        activeObservers.add(positionObserver);
      }
    }
  });
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –ø—Ä—è–º–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
  // Google Meet –º–æ–∂–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤
  setTimeout(directCaptureSubtitles, 20000);
}

// –ù–∞—Ö–æ–¥–∏—Ç –ª—é–±—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function findVisualSubtitleIndicators() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const captionIndicators = document.querySelectorAll('[aria-pressed="true"], [data-is-muted="false"]');
  let captionsEnabled = false;
  
  captionIndicators.forEach(indicator => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ —ç—Ç–æ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏/–ø–æ–¥–ø–∏—Å—è–º–∏
    const ariaLabel = indicator.getAttribute('aria-label') || '';
    const text = indicator.textContent || '';
    
    if (ariaLabel.toLowerCase().includes('caption') || 
        ariaLabel.toLowerCase().includes('subtitle') ||
        ariaLabel.toLowerCase().includes('–ø–æ–¥–ø–∏—Å') ||
        text.toLowerCase().includes('cc') ||
        text.toLowerCase().includes('caption')) {
      captionsEnabled = true;
    }
  });
  
  // –ï—Å–ª–∏ —Å—É–±—Ç–∏—Ç—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã, –Ω–æ –º—ã –Ω–µ –≤–∏–¥–∏–º –∏—Ö, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏—Ö –≤–∫–ª—é—á–µ–Ω–∏—è
  if (!captionsEnabled) {
    const captionButtons = document.querySelectorAll('button, div[role="button"]');
    
    captionButtons.forEach(button => {
      const ariaLabel = button.getAttribute('aria-label') || '';
      const text = button.textContent || '';
      
      if (ariaLabel.toLowerCase().includes('caption') || 
          ariaLabel.toLowerCase().includes('subtitle') ||
          ariaLabel.toLowerCase().includes('–ø–æ–¥–ø–∏—Å') ||
          text.toLowerCase().includes('cc') ||
          text.toLowerCase().includes('caption')) {
        // –ù–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É —Å—É–±—Ç–∏—Ç—Ä–æ–≤ - –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∫–ª–∏–∫–Ω—É—Ç—å, –Ω–æ –º—ã –Ω–µ –¥–µ–ª–∞–µ–º —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        originalConsoleLog('Found caption toggle button, but not clicking it automatically');
      }
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–∞ —Ä–µ—á—å
function findSpeechLikeText() {
  const textElements = document.querySelectorAll('div, span, p');
  const speechIndicators = [
    "hello", "hi", "hey", "yes", "no", "yeah", "okay", "ok", "thanks", "thank you",
    "–ø—Ä–∏–≤–µ—Ç", "–¥–∞", "–Ω–µ—Ç", "—Å–ø–∞—Å–∏–±–æ", "—Ö–æ—Ä–æ—à–æ", "–ª–∞–¥–Ω–æ", "–ø–æ–∫–∞"
  ];
  
  textElements.forEach(element => {
    const text = element.textContent?.trim();
    if (!text || text.length < 2) return;
    
    const lowerText = text.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–µ—á–∏
    for (const indicator of speechIndicators) {
      if (lowerText === indicator || 
          lowerText.startsWith(indicator + " ") || 
          lowerText.endsWith(" " + indicator) ||
          lowerText.includes(" " + indicator + " ")) {
        
        // –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ä–µ—á—å, –≤—ã–≤–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é
        originalConsoleLog(SUBTITLE_PREFIX + text);
        lastSubtitleTime = Date.now();
        seenSubtitles.add(text);
        
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–º
        const speechObserver = new MutationObserver(() => {
          const newText = element.textContent?.trim();
          if (newText && newText !== text && newText.length > 2) {
            originalConsoleLog(SUBTITLE_PREFIX + newText);
            lastSubtitleTime = Date.now();
            seenSubtitles.add(newText);
          }
        });
        
        speechObserver.observe(element, {
          characterData: true,
          childList: true,
          subtree: true
        });
        
        activeObservers.add(speechObserver);
        break;
      }
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
function forceSubtitleRecovery() {
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
  if (debugMessageCount < MAX_DEBUG_MESSAGES) {
    limitedDebugLog('Performing forced subtitle recovery');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å—É–±—Ç–∏—Ç—Ä–∞
  const now = Date.now();
  const timeSinceLastSubtitle = now - lastSubtitleTime;
  
  if (timeSinceLastSubtitle > 10000) { // –ï—Å–ª–∏ –±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥ –Ω–µ—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    originalConsoleLog(`No subtitles for ${timeSinceLastSubtitle}ms, forcing recovery`);
    
    // 1. –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–Ω–µ–µ –≤–∏–¥–µ–Ω–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    seenSubtitles.clear();
    
    // 2. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏
    restartObservers();
    
    // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º–æ–π –∑–∞—Ö–≤–∞—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    directCaptureSubtitles();
    
    // 4. –ò—â–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    findVisualSubtitleIndicators();
    
    // 5. –ò—â–µ–º —Ç–µ–∫—Å—Ç, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ —Ä–µ—á—å
    findSpeechLikeText();
    
    // 6. –°–∫–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å DOM –∑–∞–Ω–æ–≤–æ
    findSubtitlesWithDeepScan();
    captureSubtitlesFromVideoElement();
    
    // 7. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—É–±—Ç–∏—Ç—Ä–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
    lastSubtitleTime = now;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
setInterval(forceSubtitleRecovery, 15000);

// Function to detect when Google Meet is fully loaded
function detectGoogleMeet() {
  // Method 1: Check for specific Google Meet elements
  const meetElements = [
    '.c8mVDd',  // Meeting bottom bar
    '.crqnQb',  // Meeting container
    '.rG0ybd',  // Main meeting layout
    '.NzPR9b',  // Video grid
    '.GvcWrd',  // Participants panel
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    '.juFBgc',  // –ù–æ–≤—ã–π –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    '.XnKlKd',  // –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    '.NGp9le',  // –ù–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    '.Tmb7Fd'   // –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∏–¥–µ–æ
  ];
  
  // Check if any Meet elements exist
  const meetLoaded = meetElements.some(selector => document.querySelector(selector));
  
  if (meetLoaded) {
    originalConsoleLog('Google Meet interface detected');
    observeSubtitles();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞—Ö–≤–∞—Ç–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(directCaptureSubtitles, 1000); // –ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º - –ø—Ä—è–º–æ–π –∑–∞—Ö–≤–∞—Ç
    setTimeout(findSpeechLikeText, 1500);     // –ü–æ–∏—Å–∫ —Ä–µ—á–µ–ø–æ–¥–æ–±–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    setTimeout(findSubtitlesWithDeepScan, 2000); // –ó–∞—Ç–µ–º –≥–ª—É–±–æ–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    setTimeout(captureSubtitlesFromVideoElement, 3000); // –ó–∞—Ç–µ–º –∑–∞—Ö–≤–∞—Ç —Å –≤–∏–¥–µ–æ
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    setTimeout(() => {
      scanForSubtitles();
    }, 5000);
    
    return true;
  }
  
  return false;
}

// Initial check on page load
window.addEventListener('load', () => {
  originalConsoleLog('Page loaded, waiting for Google Meet interface...');
  
  // Immediately start the observers instead of waiting for detection
  observeSubtitles();
  
  // Try to detect Google Meet interface
  if (!detectGoogleMeet()) {
    // If not detected, set up periodic checks for Google Meet interface
    const detectInterval = setInterval(() => {
      if (detectGoogleMeet()) {
        clearInterval(detectInterval);
      }
    }, 1000);
    
    // Even if we don't detect Google Meet, still try scanning for subtitles
    setTimeout(directCaptureSubtitles, 3000); // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π –∑–∞—Ö–≤–∞—Ç
    setTimeout(findSubtitlesWithDeepScan, 5000);
    setTimeout(scanForSubtitles, 10000);
    
    // Safety timeout to clear interval after 60 seconds
    setTimeout(() => {
      clearInterval(detectInterval);
      originalConsoleLog('Timed out waiting for Google Meet interface.');
      
      // Start regular restart timer and recovery
      setTimeout(() => {
        originalConsoleLog('Starting regular restart timer');
        setInterval(restartObservers, 15000);
        setInterval(forceSubtitleRecovery, 15000);
      }, 5000);
    }, 60000);
  }
});

// Setup a mutation observer to detect when Google Meet loads
const bodyObserver = new MutationObserver((mutations) => {
  if (detectGoogleMeet()) {
    bodyObserver.disconnect();
  }
});

bodyObserver.observe(document.body, { childList: true, subtree: true }); 